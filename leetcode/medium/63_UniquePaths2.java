/*
    2021-10-17
    [Leetcode][Medium] 63. Unique Paths II
*/
class UniquePaths2 {
    int[] dx = {0,1};
    int[] dy = {1,0};

    int m=0, n=0;
    int pathCnt=0;


    /*
        my solution - failed
    */
    public int uniquePathsWithObstacles1(int[][] obstacleGrid) {
        m=obstacleGrid.length;
        n=obstacleGrid[0].length;

        int[][] visit = new int[m][n];

        if ( obstacleGrid[0][0] == 1 ) return 0;
        searchPath1(0,0,visit, obstacleGrid);
        return pathCnt;
    }
    private void searchPath1(int x, int y, int[][] visit, int[][] obstacleGrid) {
        System.out.println( x + " " + y );
        if ( x==m-1 && y==n-1 ) {
            // return sum+1;
            pathCnt++;
            return;
        }

        visit[x][y] = 1;

        for(int i=0; i<2; i++) {
            int nx=x+dx[i], ny=y+dy[i];

            if ( nx>=0 && nx<m && ny>=0 && ny<n && obstacleGrid[nx][ny]==0 && visit[nx][ny]==0 ) {
                // sum=searchPath(nx,ny, sum, visit, obstacleGrid);
                searchPath1(nx,ny, visit, obstacleGrid);
                visit[nx][ny]=0;  // visit 업데이트
            }
        }
        System.out.println( " pathCnt : " + pathCnt );
    }


    /*
        other solution 1

        Runtime: 0 ms, faster than 100.00% of Java online submissions for Unique Paths II.
        Memory Usage: 38.2 MB, less than 67.59% of Java online submissions for Unique Paths II. 
    */
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m=obstacleGrid.length, n=obstacleGrid[0].length;
        int[][] paths = new int[m][n];
        if  ( obstacleGrid[0][0]==0 ) paths[0][0]=1;

        for(int i=1; i<m; i++) {
            if ( obstacleGrid[i][0]==0 && paths[i-1][0]==1 ) {
                paths[i][0]=1;
            } else {
                paths[i][0]=0;
            }
        }
        for (int j = 1; j < n; j ++){
            if (obstacleGrid[0][j] == 0 && paths[0][j-1] == 1){
                paths[0][j] = 1;
            }
            else{
                paths[0][j] = 0;
            }
        }
        for (int i = 1; i < m ; i ++){
            for (int j = 1; j < n; j ++){
                if (obstacleGrid[i][j] == 1){
                    paths[i][j] = 0;
                }
                else{
                    paths[i][j] = paths[i-1][j] + paths[i][j-1];
                }
            }
        }
        return paths[m-1][n-1];
    }

    public static void main(String[] args) {
        UniquePaths2 up = new UniquePaths2();
        // int[][] obstacleGrid = { {0,0,0}, {0,1,0}, {0,0,0}};
        // int[][] obstacleGrid = { {1,0}};
        // int[][] obstacleGrid ={{0,0,0,0},{0,1,0,0},{0,0,0,0},{0,0,1,0},{0,0,0,0}};
        int[][] obstacleGrid ={{0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,0,0,0,1,0,0},
            {0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,0,1,0,0,0},
            {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,1},{0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
            {0,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,1,0,0,1,0,0},{0,0,0,0,0,0,1,0,0,0,1,1,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0},
            {1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,1,0,0,0,1},{0,0,0,0,1,0,0,1,0,1,1,1,0,0,0,1,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
            {0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0},{1,0,1,0,1,1,0,1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0},
            {0,0,0,0,0,0,1,0,0,1,1,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,1,0,0,0,1},{0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0},
            {1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
            {0,1,0,0,1,0,0,0,0,0,1,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0},{0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0},
            {0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0},{0,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},{0,0,0,1,0,1,0,0,1,0,0,0,0,0,1,1,1,0,1,1,1,0,0,1,0,1,0,1,1,1,0,0,0,0,0,0},
            {0,0,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},{1,1,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
            {0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0},{0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,1,1,1,0,0,0,0,0,0,1,0,0,0,1,1,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0}};
        System.out.println( up.uniquePathsWithObstacles(obstacleGrid) );
    }
    
}
